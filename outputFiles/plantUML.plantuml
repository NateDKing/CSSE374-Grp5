@startuml
allowmixing
skinparam class {
BackgroundColor<<Decorator>> LightBlue
BackgroundColor<<Singleton>> Salmon
BackgroundColor<<Singleton Abuse>> Salmon
BorderColor<<Singleton Abuse>> DarkRed
BorderColor<<Singleton>> Red
BorderColor<<Decorator>> Blue
BorderThickness<<Singleton Abuse>> 5
BorderThickness<<Singleton>> 1
BorderThickness<<Decorator>> 1
}
class AdvancedControllerContact {
  + <init>() : void
  + sendOrder(umlparser.OrderComponent, int) : String
  - createCommandJSON(umlparser.OrderComponent, int) : JSONObject
}

class AppCommunicator {
  ~ orderCreator : OrderCreator
  ~ orderQueue : Queue<JSONObject>
  + <init>() : void
  + update(java.lang.String) : void
  - notifyPhoneApp(java.lang.String) : JSONObject
  + recieveMessageFromPhone(JSONObject) : void
  + executeOrders() : void
}

class BaseOrder {
  - drinkName : String
  - instructions : String
  - address : String
  + <init>(java.lang.String, java.lang.String, java.lang.String) : void
  + getIngredients() : JSONObject
  + getOptions() : JSONObject
  + getInstructions() : String
  + getDrinkName() : String
  + getAddress() : String
}

interface ControllerContactBehavior {
  ~ <clinit>() : void
  + sendOrder(umlparser.OrderComponent, int) : String
}

class Cream {
  - COMPONENT_NAME : String
  - IS_OPTION : boolean
  + <init>(umlparser.OrderComponent, int) : void
}

class DarkRoast {
  - COMPONENT_NAME : String
  - IS_OPTION : boolean
  + <init>(umlparser.OrderComponent, int) : void
}

class DatabaseHandler {
  ~ dbConnection : String
  - SIMPLE : int
  - ADVANCED : int
  - PROGRAMMABLE : int
  + <init>() : void
  + getControllerTypeFromAddress(java.lang.String) : int
  + getControllerIdFromAddress(java.lang.String) : int
}

class Main {
  + <init>() : void
  + main(java.lang.String[]) : void
}

class Milk {
  - COMPONENT_NAME : String
  - IS_OPTION : boolean
  + <init>(umlparser.OrderComponent, int) : void
}

class Nutmeg {
  - COMPONENT_NAME : String
  - IS_OPTION : boolean
  + <init>(umlparser.OrderComponent, int) : void
}

class NutraSweet {
  - COMPONENT_NAME : String
  - IS_OPTION : boolean
  + <init>(umlparser.OrderComponent, int) : void
}

interface OrderComponent {
  ~ <clinit>() : void
  + getIngredients() : JSONObject
  + getOptions() : JSONObject
  + getInstructions() : String
  + getDrinkName() : String
  + getAddress() : String
}

class OrderCreator {
  - observers : OrderObserver>
  ~ myDB : DatabaseHandler
  ~ orderFactory : OrderFactory
  + <init>() : void
  ~ notifyObservers(java.lang.String) : void
  + registerObserver(umlparser.OrderObserver) : void
  + removeObserver(umlparser.OrderObserver) : void
  + processOrder(JSONObject) : void
  ~ createOrderFromJSON(JSONObject) : OrderComponent
}

abstract OrderDecorator {
  + isOption : boolean
  # son : OrderComponent
  # name : String
  # quantity : int
  + <init>(umlparser.OrderComponent, boolean, java.lang.String, int) : void
  + getIngredients() : JSONObject
  + getOptions() : JSONObject
  + getInstructions() : String
  + getDrinkName() : String
  + getAddress() : String
}

class OrderFactory {
  + <init>() : void
  + createDrink(java.lang.String, java.lang.String, java.util.HashMap) : OrderComponent
  - addCondiment(java.lang.String, int, umlparser.OrderComponent) : OrderComponent
  - addCondiments(java.util.HashMap, umlparser.OrderComponent) : OrderComponent
}

interface OrderObserver {
  ~ <clinit>() : void
  + update(java.lang.String) : void
}

class ProgrammableControllerContact {
  + <init>() : void
  + sendOrder(umlparser.OrderComponent, int) : String
  - createCommandJSON(umlparser.OrderComponent, int) : JSONObject
}

class PumpkinSpice {
  - isOption : boolean
  - name : String
  + <init>(umlparser.OrderComponent, int) : void
}

class SimpleControllerContact {
  + <init>() : void
  + sendOrder(umlparser.OrderComponent, int) : String
  - createCommandJSON(umlparser.OrderComponent, int) : JSONObject
}

class Sugar {
  - COMPONENT_NAME : String
  - IS_OPTION : boolean
  + <init>(umlparser.OrderComponent, int) : void
}

AdvancedControllerContact ..|>ControllerContactBehavior
AppCommunicator ..|>OrderObserver
AppCommunicator --> "1" OrderCreator
BaseOrder ..|>OrderComponent
Cream --|>OrderDecorator
DarkRoast --|>OrderDecorator
Milk --|>OrderDecorator
Nutmeg --|>OrderDecorator
NutraSweet --|>OrderDecorator
OrderCreator --> "*" OrderObserver
OrderCreator --> "1" OrderFactory
OrderDecorator ..|>OrderComponent
OrderDecorator --> "1" OrderComponent
ProgrammableControllerContact ..|>ControllerContactBehavior
PumpkinSpice --|>OrderDecorator
SimpleControllerContact ..|>ControllerContactBehavior
Sugar --|>OrderDecorator
@enduml
